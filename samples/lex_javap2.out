Lexical atoms list
File analysed: samples/javap2.java
Time: Tue Apr 24 19:22:50 2018

Type: KEYWORD                Value: class
Type: IDENTIFIER             Value: TestClass
Type: BRACKET                Value: {
Type: KEYWORD                Value: public
Type: KEYWORD                Value: static
Type: PREDEFINED TYPE        Value: void
Type: KEYWORD                Value: main
Type: BRACKET                Value: (
Type: PREDEFINED TYPE        Value: String
Type: BRACKET                Value: [
Type: BRACKET                Value: ]
Type: IDENTIFIER             Value: args
Type: BRACKET                Value: )
Type: BRACKET                Value: {
Type: PREDEFINED TYPE        Value: int
Type: IDENTIFIER             Value: a
Type: OPERATOR               Value: =
Type: INTEGER LITERAL        Value: 5
Type: SEPARATOR              Value: ;
Type: CHARACTER LITERAL      Value: '\''
Type: SEPARATOR              Value: ;
Type: PREDEFINED TYPE        Value: int
Type: BRACKET                Value: [
Type: BRACKET                Value: ]
Type: IDENTIFIER             Value: arr
Type: OPERATOR               Value: =
Type: KEYWORD                Value: new
Type: PREDEFINED TYPE        Value: int
Type: BRACKET                Value: [
Type: INTEGER LITERAL        Value: 8
Type: BRACKET                Value: ]
Type: SEPARATOR              Value: ;
Type: PREDEFINED TYPE        Value: char
Type: IDENTIFIER             Value: b
Type: OPERATOR               Value: =
Type: CHARACTER LITERAL      Value: 'b'
Type: SEPARATOR              Value: ;
Type: PREDEFINED TYPE        Value: double
Type: IDENTIFIER             Value: x
Type: OPERATOR               Value: =
Type: FLOATING POINT LITERAL Value: 3.14159
Type: SEPARATOR              Value: ;
Type: PREDEFINED TYPE        Value: double
Type: IDENTIFIER             Value: y
Type: OPERATOR               Value: =
Type: FLOATING POINT LITERAL Value: 3.14159e-10
Type: SEPARATOR              Value: ;
Type: IDENTIFIER             Value: a
Type: IDENTIFIER             Value: /
Type: INTEGER LITERAL        Value: 5
Type: SEPARATOR              Value: ;
Type: PREDEFINED TYPE        Value: double
Type: IDENTIFIER             Value: z
Type: OPERATOR               Value: =
Type: IDENTIFIER             Value: x
Type: OPERATOR               Value: ++
Type: OPERATOR               Value: +
Type: IDENTIFIER             Value: y
Type: SEPARATOR              Value: ;
Type: PREDEFINED TYPE        Value: int
Type: IDENTIFIER             Value: _xi
Type: OPERATOR               Value: =
Type: INTEGER LITERAL        Value: 1
Type: SEPARATOR              Value: ;
Type: PREDEFINED TYPE        Value: int
Type: IDENTIFIER             Value: _zi
Type: OPERATOR               Value: =
Type: BRACKET                Value: (
Type: IDENTIFIER             Value: _xi
Type: OPERATOR               Value: >>>=
Type: INTEGER LITERAL        Value: 1
Type: BRACKET                Value: )
Type: OPERATOR               Value: <<
Type: INTEGER LITERAL        Value: 1
Type: SEPARATOR              Value: ;
Type: PREDEFINED TYPE        Value: int
Type: IDENTIFIER             Value: m
Type: OPERATOR               Value: =
Type: INTEGER LITERAL        Value: 15
Type: SEPARATOR              Value: ,
Type: IDENTIFIER             Value: n
Type: OPERATOR               Value: =
Type: INTEGER LITERAL        Value: 10
Type: SEPARATOR              Value: ;
Type: IDENTIFIER             Value: m
Type: OPERATOR               Value: =
Type: IDENTIFIER             Value: m
Type: OPERATOR               Value: ^
Type: IDENTIFIER             Value: n
Type: SEPARATOR              Value: ;
Type: IDENTIFIER             Value: n
Type: OPERATOR               Value: =
Type: IDENTIFIER             Value: m
Type: OPERATOR               Value: ^
Type: IDENTIFIER             Value: n
Type: SEPARATOR              Value: ;
Type: IDENTIFIER             Value: m
Type: OPERATOR               Value: =
Type: IDENTIFIER             Value: m
Type: OPERATOR               Value: ^
Type: IDENTIFIER             Value: n
Type: SEPARATOR              Value: ;
Lexical analysis error - Pos No: 445
Type: STRING LITERAL         Value: "I'm a strange \"string\" literal here"
Type: PREDEFINED TYPE        Value: boolean
Type: IDENTIFIER             Value: _val
Type: OPERATOR               Value: =
Type: BOOLEAN LITERAL        Value: true
Type: KEYWORD                Value: if
Type: BRACKET                Value: (
Type: IDENTIFIER             Value: _val
Type: OPERATOR               Value: ==
Type: BOOLEAN LITERAL        Value: true
Type: BRACKET                Value: )
Type: IDENTIFIER             Value: System
Type: SEPARATOR              Value: .
Type: IDENTIFIER             Value: out
Type: SEPARATOR              Value: .
Type: IDENTIFIER             Value: println
Type: BRACKET                Value: (
Type: STRING LITERAL         Value: "YES"
Type: BRACKET                Value: )
Type: SEPARATOR              Value: ;
Type: KEYWORD                Value: if
Type: BRACKET                Value: (
Type: IDENTIFIER             Value: a
Type: OPERATOR               Value: <
Type: IDENTIFIER             Value: b
Type: BRACKET                Value: )
Type: BRACKET                Value: {
Type: IDENTIFIER             Value: a
Type: OPERATOR               Value: ++
Type: SEPARATOR              Value: ;
Type: KEYWORD                Value: return
Type: BOOLEAN LITERAL        Value: false
Type: SEPARATOR              Value: ;
Type: BRACKET                Value: }
Type: KEYWORD                Value: else
Type: KEYWORD                Value: if
Type: BRACKET                Value: (
Type: IDENTIFIER             Value: a
Type: OPERATOR               Value: <=
Type: IDENTIFIER             Value: b
Type: BRACKET                Value: )
Type: BRACKET                Value: {
Type: IDENTIFIER             Value: b
Type: OPERATOR               Value: +=
Type: INTEGER LITERAL        Value: 7
Type: SEPARATOR              Value: ;
Type: KEYWORD                Value: return
Type: BOOLEAN LITERAL        Value: true
Type: SEPARATOR              Value: ;
Type: BRACKET                Value: }
Type: KEYWORD                Value: return
Type: PREDEFINED TYPE        Value: null
Type: SEPARATOR              Value: ;
Type: BRACKET                Value: }
Type: BRACKET                Value: }
